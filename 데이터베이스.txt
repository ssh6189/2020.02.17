데이터베이스(django에서 database를 어떻게 다루는가?)

DB하면, Oracle (한때 국내에서 시장 점유율 90%)

My SQL, Oracle, java라이센스도 보유

데이터 베이스는 컴퓨터에서 가장 변화가 없는 분야

웹은 차이가 많다.

#########################################

데이터(data)

실세계의 실체를 묘사하는 값

정보(information)
데이터는 사실들 그 자체에 대한 일차적인 표현
사실들과 이들로부터 유도될 수 있는 유추된 사실들
관련성과 목적을 갖춘 데이터(Peter Drucker)
정보 = 데이터 + 의미

지식(knowledge)
데이터와 정보에 비해 좀 더 상위 수준의 개념
수동적이고 정적인 데이터나 정보에 비해, 이들을 처리하는 방법이나 어던 근거에 의한 판단을 내리는데, 필요한
방법이나 어떤 근거에 의한 판단을 내리는데 필요한것

정보의 진화단계

지혜 - 통찰력을 가진 지식 : C매장의 전체피자매출 상승은 주요 고객 그룹의 소비성향 변화에 기인한것이다.
지식 - 의미있는 정보 : 상대적으로 저렴한 C매장 피자를 먹어야겠다.
정보 - 상황 설명을 위한 데이터 : M매장 피자가 C매장보다 더 비싸다.
데이터 - 사실관찰 M매장 피자 : 18000원, C회사 피자 : 10600원
사실 또는 환경 : 실세계의 모든것, 가상의 그 무엇

정보의 진화단계
데이터를 정보로 정보를 지식으로 지식을 지혜로 바꾸면 최고가 될 수 있다.

데이터만으로는 아무 가치가 없다.
통계를 가미하면, 가치가 생긴다.

일시적인 데이터와 지속적인 데이터
일시적인 데이터 : 해당 프로세스가 실행되는 동안만 일시적으로 존재
예 : 프로그램의 변수

지속적인 데이터
어떤 프로세스의 생명주기에 종속적이지 않고, 스스로 존재
비휘발성 매체에 저장

데이터베이스는 지속적인 데이터의 모임을 뜻한다.



데이터베이스 관리 시스템

DBMS, database management system
컴퓨터에 저장되는 데이터베이스를 관리해주는 소프트웨어 시스템

상용 DBSM : DB2, Oracle, Informix, BADA, MS SQL Server, Sybase, ddBase, FoxPro, Access....



물건 : 데이터
창고 : 데이터베이스(디스크)
창고 관리인 : DBMS
직원 : 응용프로그램 또는 사용자

우리는 항상, 창고 관리인을 통해서, 물건과 접촉 또는 조작이 가능하다.



########################################

데이터베이스의 정의와 특징
데이터 베이스
여러 사용자나 응용프로그램이 공유하고, 동시에 접근 가능한 '데이터의 집합'
'데이터의 저장 공간' 자체를 의미하기도 함

-데이터베이스의 특징-
데이터의 무결성 : 데이터베이스 안의 데이터는 어떤 경로를 통해서 들어왔든 오류가 있어서는 안됨
데이터의 독립성 : 데이터베이스와 응용 프로그램은 서로 의존적인 관계가 아니라, 독립적인 관계임
보안 : 데이터베이스 안의 데이터는 데이터를 소유한 사람이나 데이터에 접근이 허가된 사람만 접근할 수 있음
데이터 중복 최소화 : 데이터베이스에서는 동일한 데이터가 여러군데 중복 저장되는것을 방치함
응용 프로그램 제작 및 수정 용이 : 데이터베이스를 이용하면, 통일된 방식으로 응용 프로그램을 작성할 수 있고, 유지, 보수 또한 쉬움
데이터의 안전성 향상 : 데이터가 손상되는 문제가 발생하더라도 원래의 상태로 복원 또는 복구할 수 있음



DBSM의 분류

관계형 DBMS
(테이블과 테이블 사이의 관계를 정의할 수 있어, 관계형 DB라고 한다.)
모든 데이터는 테이블에 저장:엑셀같은것
테이블간의 관계는 기본기(PK)와 외래키(FK)를 사용하여, 맺음(부모, 자식 관계)
다른 DBMS에 비해 업무 변화에 따라 바로 순응할 수 있고, 유지 보수 측면에서도 편리
대용량 데이터를 체계적으로 관리할 수 있음
데이터의 무결성도 잘 보장됨
시스템 자원을 많이 차지하며, 시스템이 전반적으로 느려지는 단점이 있다.



프로그래밍언어 : 함수형에서 객체지향으로, DB도 요새 그렇다.



계층형 DBMS
우리에게 익숙한 구조
각 계층이 트리 형태를 띄고, 1:N관계를 가짐
한번, 구축하면, 구조를 변경하기 까다로움
접근의 유연성이 부족하여, 임의 검색 시 어려움
탐색 시간복잡도의 기울기가 n에서 log(n)으로 바뀐다.
딕셔너리도, 계층형 DB의 일종이다.



-영수증-
각각의 유형별로 어떻게 변화되는지 보자

홍길동
2020년 2월 17일
사과 : 1000원 5개 5000원
배 : 2000원 2개 4000원
감자 : 100원 10개 1000원

어떻게 기록할 것인가?
직관적인것은 엑셀 또는 테이블

Dictionary 
Table
객체



Dictionary
dict = [{"name":홍길동, "data":"2020.02.17", "product":p[{"품목:"사과", "price":"300","수량":4}]},
{"name":이순신, "data":"2020.02.17", "product":p[{"품목:"사과", "price":"300","수량":4}]}]

이것의 문제점?
만약, 사과의 총합을 구하라고 하면, 표준화된 방법이 없어, 개발자 마음대로이다.
방법이 다 다르다.

그래서, 나온것이 SQL



SQL의 개요

SQL
데이터 베이스를 조작하는 언어

SQL의 특징
DBMS제작 회사와 독립적임
다른 시스템으로의 이식성이 좋다.
표준이 계속 발전
대화식 언어
클라이언트/서버 구조를 지원한다.

표준 SQL과각 회사의 SQL
많은 회사가 되도록 표준 SQL을 준수하려고, 노력하지만, 각 회사의 DBMS마다 특징이 있기 때문에,
현실적으로 완전히 통일되기는 어렵다.
각 회사의 제품은 모두 표준 SQL을 공통으로 사용하면서,
자기 제품의 특성에 맞춘 호환되지 않은, SQL문서를 사용한다.



파이썬은 절차식 언어, SQL은 선언적 언어(목적만 말하면 된다.)
SQL과 파이썬은 다르다.
SQL 구조화된 질의 언어 문
데이터베이스에서 사용되는 일종의 공통 언어
NCITS(국제 표준화위원회)에서 ANSI/ISO SQL이라는 명칭의 SQL표준을 관리하고 있다.
1992년에 제정된 ANSI-92 SQL과 1999년에 제정된, ANSI-99 SQL

데이터베이스에서 SQL은 크게 두가지 언어, 데이터 구조(TABLE)를 만드는 언어, 데이터 구조내부에서 데이터를 변경할 수 있는 언어
2가지가 있다.

우리가 주로 사용하는것은, 테이블 자체를 만드는것보다는 변경하는것을 사용하게 될것이다.



SELECT문의 형식
요약된 SELECT문의 형식 : 원하는것, 알고싶은것을 찾을 때, 내가 어떤 테이블에서 어떤열을 참조할것인가
기본적으로 테이블은 한개만 입력

SELECT 열이름
FROM 테이블이름
WHERE 조건



WHERE 절
SELECT 열이름 FROM 테이블 이름 WHERE 조건식

파이썬 같은 언어로 하면, 오히려, 더 복잡하다.

BETWEEN, AND는 특정 범위 내 추출
OR,
IN : 조회
AND
LIKE 는 맨 앞글자가 무엇이든 상관없고, 그 다음이 해당 단어인 사람 조회 LIKE_HONGGILDONG

ORDER BY : 기본적으로 오름차순으로 정렬

GROUPBY : 절 데이터를 가지고 온 다음에 하는 절차가 GROUPBY이다.
데이터를 가지고 온다음에 그룹핑하는것이다.

데이터베이스에서 할 수 있는것은 DB에서 처리를 해야한다.



집계함수
AVG()
MIN()
MAX()
COUNT()
SUM()



조인의 개요
조인 : 2개이상의 테이블을 묶어서 하나의 테이블을 만드는것

내부조인
내부조인의 작동 : 기본 컨셉은 곱한다는것이다.
하나에 대해 모두 대응되는것을 매핑

조인관련된게 가장 먼저 나와야한다.
PRIMARY 키는 주력키이다.

having 조건절
그룹핑을 한다음에 사용가능한 조건절이다.
################################################
실행방법

SQL 파일이 있는 폴더로 가서, 다음을 실행
1. python manage.py runserver

2. pip install django_extensions

3. python manage.py createsuperuser

4. username 설정 (home으로 하자)

5. password 설정 (home으로 하자)

6. 다시, python manage.py runserver 실행

7. 크롬에서 http://localhost:8000/admin 입력

8. add user로 들어간다.

9. 이순신 입력, 비번도 똑같이

10. 세이브 하면, 이순신이 추가된것을 볼 수 있다.

11. 만든 데이터는 mysite의 db.sqllite3에 다 들어가 있다.

12. SQLite browser라는 툴 사용할것이다. 사이트에 들어가서, 다운로드 페이지에서
알맞는것 다운 SQLite zip으로 하자, 압축풀고 들어가면, SQL을 좀더 쉽게 사용할 수 있는 인터페이스 프로그램이 있다.

13. 데이터 파일열기로 SQL 파일을 연다.

14. 데이터 보기를 통해 아까, 만든 이순신데이터를 볼 수 있다.

15. 여기서도 데이터를 생성할 수도 있고, 삭제할 수 도 있다. 직접 Django administration에서 해도 된다.

16. 변경사항을 저장하기를 누르면, Django administration에서 변경사항을 볼 수 있다.

17. SQL 실행을 가서, 지난번 커맨드창에서 했던것을 할 수 있다.

18. SQL 텍스트파일을 복붙해서 실행

19. 이미 한번 실행했으므로, 실행한 구문은 지우고, 
INSERT INTO userTBL VALUES
('KHD', '강호동', 1970, '경북', '011', '22222222', 182, 2007-07-07)

알맞은 파라미터 입력

그리고, 만약, '강호동2'로 하면, 에러가 난다. 이는, 데이터를 보호하기 위한 장치이다.

20. 다음과 같이 추가
INSERT INTO userTBL VALUES
('YJS', '유재석', 1972, '서울', '010', '11111111', 178, 2008-08-08)

21. 이러면, 에러, 대응되는 키값이 존재하지 않는다.

INSERT INTO buyTBL VALUES
(NULL, 'fef', '운동화', NULL, 30, 2);

22. 데이터의 일부만 사용할때는, 각각이 무엇을 의미하는지, 다음과 같이 명시를 해주어야한다.
INSERT INTO buyTBL (num, userID, prodName, price, amount)
VALUES (1, 'KHD', '운동화', 30, 2);

23. 다음과 같이 추가
INSERT INTO buyTBL (num, userID, prodName, price, amount)
VALUES (2, 'YJS', '노트북', 1000, 1);

24. 데이터 불러오기
# addr을 키값으로, 그룹핑한 후, 해당 키값을 가지고 있는 데이터의 수를 센다.
select addr, count(*) from userTBL
group by addr

25. 각자 구매한, 물건의 개수 총합
select userid, sum(price*amount)
from buyTBL
group by userid

26.내부조인을 해보자
다음과 같이 입력하면, 두 테이블을 불러와 매핑을 시키게 된다.

select * from userTBL, buyTBL

내가 필요한것은 두 테이블 모두다. SQL은 선언적 언어다.
그러니, 네가 실행을 해달라는 의미

그러나, 쓸모 없는것들이 많다. 그래서, 다음과 같이 조건을 제시해야한다.
where userTBL.userid = buyTBL.userID

27.userid와 username이 같은 항목의 총 구입수량과, 총 값은 얼마인가요?
select userid, username, sum(amount),
    sum(amount*price)

28. addr과 sum(amount)를 골라 총합이 170이상인것만 추출
select addr, sum(amount),
    sum(amount*price) total, count(*)
from userTBL u, buyTBL b
where u.userid = b.userid
group by addr
having total > 170
order by total



###########################################
ORM

장고는 기본적으로 ORM을 권장한다. Object Relation Model(객체 관계 매핑, 사실 이게 더 맞다.)
지난주까지한것은 함수 베이스다.
파이썬에서 이 객체를 다룰 수 있게 한다.

테이블이 아니라, 객체를 만든다는 컨셉이다.

파이썬으로는 object가 더 익숙하다.



예를들어,
class Person(models.Model):
first_name:
models.CharField(max_length = 30)
last_name:
models.CharField(max_length = 30)

이것을 다음과 같이 바꾼다.

CREATE TABLE myapp_person(
"id" serial NOT NULL PRIMARY KEY,
"first name" varchar(30) NOT NULL
"last_name" varchar(30) NOT NULL
)

즉, 데이터베이스와 파이썬 중간에 위치하여, 번역해주는 역할을 한다.

ORM
파이썬이 직관적이고, DB는 직관적이지가 않다.
어떤 데이터 베이스든 상관없이, 파이썬으로 다룰 수가 있다.
DB를 몰라도, DB를 다룰 수 있다.
SQL이 훨씬 어렵지, ORM은 어렵지 않다.

테이블 생성
관리자 및 user 생성

관련 설정은 app별로 설정

Model 클래스 생성
admin.py 수정
DB 변경 사항 반영

실제, DB변경 사항 반영
python manage.py makemigration myapp : 변경 내역에 대한 정보만 수집
python manage.py migrate : 실제 반영



############################################
1. mysite - mysite - settings파일에서 databases 적절한 db로 변경

2. settings파일에서 installed_apps에 'myapp' (app 이름)  추가

#테이블 하나 추가할때마다 3번 ~ 6번을 해야한다.
3. myapp - models파일에 클래스 추가

4. myapp - admin에 admin추가

5. cmd창의 mysite경로로 가서, python manage.py makemigrations myapp를 입력하고, 엔터를 치면,
빈 init파일에 내용이 채워진다.

6. python manage.py migrate

7. python manage.py shell

#나가기 : quit()

8. 다음과 같이 입력
from myapp.models import User

datas = User.objects.all()

print(datas)

9.객체 수정
해당 속성에 원하는 값 기입
u.id = ''
u.name = ''

삭제
u.delete()

########################################

jupyter notebook과 연동

1. mysite 폴더에서 pip install django==2.0, 2.0버전만 지원된다.

2. jupyter noebook과 연동하기 위해, mysite 폴더에서 pip install django-extensions

3. 그리고, mysite - settings에서, Installed_apps에 django_extensions

그러면, 연동해서 사용 가능

4. mysite 경로에서 python manage.py shell_plus --notebook입력

5. 참고로 데이터 추가는 django 사이트의 myapp(명) 들어가서, users 클릭하고 추가

6. 함수적용도 가능, myapp폴더의 views 파일로 가서, 함수 생성